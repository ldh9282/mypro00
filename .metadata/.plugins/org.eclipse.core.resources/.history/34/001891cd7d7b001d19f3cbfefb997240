package com.spring.mypro00.common.security;

import java.io.IOException;
import java.util.Collection;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.web.WebAttributes;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;

import lombok.extern.log4j.Log4j;


@Log4j
public class MyLoginSuccessHandler2 extends SavedRequestAwareAuthenticationSuccessHandler {
	
	@Override
	public void onAuthenticationSuccess(
			HttpServletRequest request,
			HttpServletResponse response,
			Authentication authentication)
					throws ServletException, IOException {
		
		// Remove previous authentication errors
		HttpSession session = request.getSession(false);
		
		if (session != null) {
			session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
		}
		
		// Log the authentication and authorities
		log.info("authentication: " + authentication);
		
		Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
		log.info("authorities: " + authorities);
		
		// Get the user's role names
		Set<String> roleNames = AuthorityUtils.authorityListToSet(authorities);
		log.info("roleNames: " + roleNames);
		
		// Redirect the user to the appropriate page depending on their role
		String redirectUrl = "/mypro00/";
		if (roleNames.contains("ROLE_ADMIN")) {
			redirectUrl = "/mypro00/myboard/detail?bno=1";
		}

		// Check if there is a saved request
		RequestCache requestCache = new HttpSessionRequestCache();
		SavedRequest savedRequest = requestCache.getRequest(request, response);
		if (savedRequest == null) {
			// If there is no saved request, redirect to the appropriate page
			response.sendRedirect(redirectUrl);
		} else {
			// Otherwise, use the default behavior
			super.onAuthenticationSuccess(request, response, authentication);
		}
	}
	
	
	
	
	
}
