package com.spring.mypro00.common.task;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.spring.mypro00.domain.MyBoardAttachFileVO;
import com.spring.mypro00.mapper.MyBoardAttachFileMapper;

import lombok.AllArgsConstructor;

@Component
@AllArgsConstructor
public class ClearMyUploadFileRepo {

	private MyBoardAttachFileMapper myBoardAttachFileMapper;
	
	// 하루 전 문자열 생성 메서드
	private String getStrOfYesterdayFolder() {
		
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy/MM/dd");
		
		Calendar calendar = Calendar.getInstance();
		
		calendar.add(Calendar.DATE, -1);
		
		String strYesterday = simpleDateFormat.format(calendar.getTime());
		
		// 운영체제에 따른 separator 호환을 위해 replace
		return strYesterday.replace("/", File.separator);
	}
	
	// 매일 오전 3시에 자동으로 실행
	@Scheduled(cron = "* * 17 * * *")
	public void clearNeedlessfiles() {
		String uploadfileRepoDir = "C:/myupload";
		
		// 지우면 안되는 첨부파일 Path 리스트
		List<MyBoardAttachFileVO> doNotDeleteFileList = 
				myBoardAttachFileMapper.selectAttachFilesBeforeOneDay();
		
		
		List<Path> doNotDeleteFilePathList = doNotDeleteFileList.stream()
				.map((myBoardAttachFile) -> {
					return Paths.get(myBoardAttachFile.getRepoPath(),
								     myBoardAttachFile.getUploadPath(), 
								     myBoardAttachFile.getUuid() + "_" +
								     myBoardAttachFile.getFileName());
				})
				.collect(Collectors.toList());
		
		doNotDeleteFileList.stream().filter((myBoardAttachFile) -> {
			// 이미지 파일 필터링
			return myBoardAttachFile.getFileType().equals("I");
		}).map((myBoardAttachFile) -> {
			// 이미지 파일을 썸네일 Path객체로 요소 교체
			return Paths.get(myBoardAttachFile.getRepoPath(),
							 myBoardAttachFile.getUploadPath(), "/s_" + 
							 myBoardAttachFile.getUuid() + "_" +  
							 myBoardAttachFile.getFileName());
		}).forEach((doNotDeleteFilePath) -> {
			// 교체한 Path객체를 지우면 안되는 첨부파일 Path 리스트에 추가
			doNotDeleteFilePathList.add(doNotDeleteFilePath);
		});
		
		System.out.println("==================================================");
		// 최종 지우면 안되는 파일(썸네일 포함)의 Path 목록
		doNotDeleteFilePathList.forEach((doNotDeleteFilePath) -> {
			System.out.println(doNotDeleteFilePath);
		});
		// 하루 전 날짜형식의 폴더
		File dirBeforeOneDay = 
				Paths.get(uploadfileRepoDir, getStrOfYesterdayFolder())
					 .toFile();
		
		// DB에 없는 서버의 파일을 삭제
		File[] needlessFileArray = dirBeforeOneDay.listFiles((eachFile) -> {
			return doNotDeleteFilePathList.contains(eachFile.toPath()) == false;
		});
		
		System.out.println("==================================================");
		
		if (needlessFileArray == null) {
			System.out.println("====== 삭제할 파일이 없습니다=========");
			
		} else {
			for (File needlessFile : needlessFileArray) {
				System.out.println("=====다음의 파일들이 삭제됩니다.================");
				System.out.println("필요없는 파일 이름: " + needlessFile.getAbsolutePath());
				
				needlessFile.delete();
			}
		}
	}
	
}
